// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/rhoegg/go-anypoint/anypointplatform (interfaces: ProfileService)

package anypointplatform_test

import (
	context "context"
	pegomock "github.com/petergtz/pegomock"
	anypointplatform "github.com/rhoegg/go-anypoint/anypointplatform"
	"reflect"
	"time"
)

type MockProfileService struct {
	fail func(message string, callerSkip ...int)
}

func NewMockProfileService() *MockProfileService {
	return &MockProfileService{fail: pegomock.GlobalFailHandler}
}

func (mock *MockProfileService) Get(_param0 context.Context) (*anypointplatform.Profile, *anypointplatform.Response, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockProfileService().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Get", params, []reflect.Type{reflect.TypeOf((**anypointplatform.Profile)(nil)).Elem(), reflect.TypeOf((**anypointplatform.Response)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *anypointplatform.Profile
	var ret1 *anypointplatform.Response
	var ret2 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*anypointplatform.Profile)
		}
		if result[1] != nil {
			ret1 = result[1].(*anypointplatform.Response)
		}
		if result[2] != nil {
			ret2 = result[2].(error)
		}
	}
	return ret0, ret1, ret2
}

func (mock *MockProfileService) GetID(_param0 context.Context) (string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockProfileService().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetID", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockProfileService) GetOrganizationID(_param0 context.Context) (string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockProfileService().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetOrganizationID", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockProfileService) VerifyWasCalledOnce() *VerifierProfileService {
	return &VerifierProfileService{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockProfileService) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierProfileService {
	return &VerifierProfileService{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockProfileService) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierProfileService {
	return &VerifierProfileService{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockProfileService) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierProfileService {
	return &VerifierProfileService{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierProfileService struct {
	mock                   *MockProfileService
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierProfileService) Get(_param0 context.Context) *ProfileService_Get_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Get", params, verifier.timeout)
	return &ProfileService_Get_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type ProfileService_Get_OngoingVerification struct {
	mock              *MockProfileService
	methodInvocations []pegomock.MethodInvocation
}

func (c *ProfileService_Get_OngoingVerification) GetCapturedArguments() context.Context {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *ProfileService_Get_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
	}
	return
}

func (verifier *VerifierProfileService) GetID(_param0 context.Context) *ProfileService_GetID_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetID", params, verifier.timeout)
	return &ProfileService_GetID_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type ProfileService_GetID_OngoingVerification struct {
	mock              *MockProfileService
	methodInvocations []pegomock.MethodInvocation
}

func (c *ProfileService_GetID_OngoingVerification) GetCapturedArguments() context.Context {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *ProfileService_GetID_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
	}
	return
}

func (verifier *VerifierProfileService) GetOrganizationID(_param0 context.Context) *ProfileService_GetOrganizationID_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetOrganizationID", params, verifier.timeout)
	return &ProfileService_GetOrganizationID_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type ProfileService_GetOrganizationID_OngoingVerification struct {
	mock              *MockProfileService
	methodInvocations []pegomock.MethodInvocation
}

func (c *ProfileService_GetOrganizationID_OngoingVerification) GetCapturedArguments() context.Context {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *ProfileService_GetOrganizationID_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
	}
	return
}
